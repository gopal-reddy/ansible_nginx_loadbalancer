---
- name: Postgresql | Install Packages
  apt: >
    name: "{{ item }}"
    state: present
    update-cache: yes
  loop:
    - build-essential
    - postgresql
    - python-dev
    - python-setuptools
    - python-psycopg2
    - postgresql-9.3
    - postgresql-contrib-9.3
    - postgresql-doc-9.3
    - libpq-dev

#- name: Postgresql | Listen on public interface
  
# lineinfile: >
#   dest: /etc/postgresql/9.3/main/postgresql.conf
#   regexp: "^listen_addresses"
#   insertafter: "^#listen_addresses"
#   line: "listen_addresses = '*'"
# notify: restart postgresql

#- name: Postgresql | Allow access to appservers
#  when: not 'appservers' in group_names
#  lineinfile: >
#    dest: /etc/postgresql/9.3/main/pg_hba.conf
#    regexp: "host {{ database.name }} {{ database.user }} {{ item }}/32 trust"
#    line: "host {{ database.name }} {{ database.user }} {{ item }}/32 trust"
#  with_items: groups.get('appservers')
#  notify: restart postgresql

#- name: Postgresql | Allow access to appservers
#  when: ('appservers' in group_names)
#  lineinfile: >
#    dest: /etc/postgresql/9.3/main/pg_hba.conf
#    regexp: "local\s+{{ database.name }}\s+{{ database.user }}\s+trust"
#    line: "local {{ database.name }} {{ database.user }} trust"
#  with_items: groups.get('appservers')
#  notify: restart postgresql

- name: Postgresql | Create Database User
 
  become_user: postgres
  postgresql_user: >
    user: {{ database.user }}
    password: {{ database.password }}
    role_attr_flags: CREATEDB,NOSUPERUSER
  tags: database

- name: Postgresql | Create Database.
  become_user: postgres
  postgresql_db: >
    name: {{ database.name }}
    owner: {{ database.user }}
    login_host: localhost
    login_user: {{ database.user }}
    login_password: {{ database.password }}
    encoding: 'UTF-8'
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: 'template0'
  tags:
    - database
    - create

- name: Postgresql | Allow traffic from appservers through firewall
  ufw: >
    rule: allow
    proto: any
    port: {{ database.port }}
    from_ip: {{ item }}
  with_items: groups.get('appservers')
  tags:
    - firewall
    - database
